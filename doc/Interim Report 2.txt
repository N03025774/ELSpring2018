Maze Solving Robot

Description: Design a robot that can utilize a IR reflectance sensor to follow a line maze until the end point is reached. The program will then determine the best path used by the robot and return to the start.

Summary: Chassis will be assembled once all parts are completed. Motors are being wired and programmed. A power supply is still needed. The reflectance sensor is done, and communicates over i2c. We have also brainstormed a maze solving algorithm as well as a method to remember the most effective path used.

What Needs to be done: In the next week we need to complete construction of the chassis and attach the reflectance sensor to it. We need to create the code for it to sense intersections and call the maze solving algorithm to make the next correct move. As well as demonstrate the most effective path taken during the solution. Lastly we need to test the robot in a real world situation prior to presenting the finished project.

Each Team Members Role:
Michael Martinez:

	Work Completed: Built and soldered chassis, attached the power supply and wire Rpi to chassis.
	Will Need to Do: Research and code motors to make correct turns during maze solution

Seraphim Dmitrieff:

	Work Completed: Research maze solving algorithm as well as devised method for remembering best path taken.
	Will Need to Do: Code maze solving algorithm with the method for remembering best path. Work with partners to merge all code together into one program.

David Schloemer:

	Work Completed: The IR reflectance sensor detects the reflectance of a surface by using an IR pulse, generated by an IR LED, and measures the amount of IR light that bounces back to a photo-transistor located next to the IR LED. The sensor returns a raw value between 0 and a value set in the program, in our case 3000. The code on the arduino reads this number and based on testing I determined how to manipulate this raw value into a 1 or 0, 1 meaning a line is detected. Because there are 8 sensors this data can be transmitted using a single byte (8 bits). Using i2c this data is transmitted to the pi. The arduino is set as address #08 and is configured as a slave device. Because the arduino is a 5v device and the pi a 3.3v device the pi must be the master as the master sets the voltage for i2c devices. Functions for easily retrieving and manipulating the data on the pi were also written, as well as instructions on how to import them as a library.

	Will Need to Do: Attach sensor to chassis
